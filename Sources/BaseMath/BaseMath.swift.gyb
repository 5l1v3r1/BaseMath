import Foundation
import CBaseMath

%{ import sys; sys.path.append('../..'); from mathfuncs import * }%

extension BinaryFloatingPoint where Self: CVarArg {
  public func string(_ digits:Int) -> String { return String(format: "%.\(digits)f", self) }
}

precedencegroup ExponentiationPrecedence { associativity: right higherThan: MultiplicationPrecedence }
infix operator ^^: ExponentiationPrecedence

public extension Numeric {
  typealias Element=Self
  typealias PtrT = UnsafePointer<Element> 
  typealias MutPtrT = UnsafeMutablePointer<Element>
}

public protocol SupportsBasicMath:BinaryFloatingPoint {
  init(_ value: Self)
  init()

  var nsNumber:NSNumber {get}

% for f in binfs:
  func ${f}(_ b: Self) -> Self
% end # f
% for f in funcs2:
  func ${f}() -> Self
% end # f

  static func sqr(_ a:Self) -> Self
  func sqr() -> Self
  func abs() -> Self
  static func sum(_ a:PtrT, _ n:Int32) -> Element
  % for f in unaryfs:
  static func sum${f}(_ a:PtrT, _ n:Int32)->Element
  % end
  static func sumsqr(_ a:PtrT, _ n:Int32)->Element

  static func ^^(x:Self, a:Self) -> Self
}

% for t in types:
extension ${t} : SupportsBasicMath {
  public var nsNumber:NSNumber { return NSNumber(value: self) }

  % for f,op in zip(op_fs,ops):
  @inlinable public func ${f}(_ b: ${t}) -> ${t} {return self ${op} b}
  % end # f,op

  @inlinable public static func sqr(_ a:${t}) -> ${t} {return  a  * a  }
  @inlinable public        func sqr(        ) -> ${t} {return self*self}

  @inlinable public func subRev(_ b: ${t}) -> ${t} {return b - self}
  @inlinable public func divRev(_ b: ${t}) -> ${t} {return b / self}

  % for f in funcs2:
  @inlinable public func ${f}() -> ${t} {return Foundation.${f}(self)}
  % end # f

  @inlinable public func min(_ b: ${t}) -> ${t} {return Swift.min(self, b)}
  @inlinable public func max(_ b: ${t}) -> ${t} {return Swift.max(self, b)}

  @inlinable public func abs() -> ${t} {return Swift.abs(self)}

  % for f in funcs3:
  @inlinable public func ${f}(_ b: ${t}) -> ${t} {return Foundation.${f}(self, b)}
  % end # f

  @inlinable public static func sum(_ a:PtrT, _ n:Int32) -> Element { return smSum_${t.lower()}(a, n) }
  % for f in unaryfs:
  @inlinable public static func sum${f}(_ a:PtrT, _ n:Int32)->Element { return smSum_${f}_${t.lower()}(a, n) }
  % end
  @inlinable public static func sumsqr(_ a:PtrT, _ n:Int32)->Element { return smSum_sqr_${t.lower()}(a, n) }

  public static func ^^(x:${t}, a:${t}) -> ${t} { return x.pow(a) }
}
% end # t

