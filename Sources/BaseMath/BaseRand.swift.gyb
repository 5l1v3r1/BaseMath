import Foundation
import CBaseMath

%{ import sys; sys.path.append('../..'); from cpp_template import *; from cpp_types import * }%

public protocol Initable { init() }
% for t in float_swift+int_swift+['Bool']:
extension ${t}:Initable {}
% end

public protocol CppTypePtr {
  func delete()
}

public class CppType<T:CppTypePtr> {
  public let p:T
  init(_ p:T) {self.p=p}
  deinit {p.delete()}
}

public class mt19937:CppType<mt19937C> {
  public convenience init() { self.init(CBaseMath.mt19937_create()) }

  @usableFromInline static var storeKey:String { get { return "mt19937" } }
  @usableFromInline static var stored:mt19937 { get {
    if let r = Thread.current.threadDictionary[storeKey] as? mt19937 { return r }
    return Thread.setToTLS(mt19937(), storeKey)
  }}
}

public protocol DistributionC:CppTypePtr {
  associatedtype Element:SignedNumeric
  func call(_ g:mt19937C)->Element
}

public class Distribution<T:DistributionC>:CppType<T>,Nullary {
  public typealias Element=T.Element
  public var g:mt19937

  init(_ p:T, _ g:mt19937) {self.g=g; super.init(p) }
  @inlinable public subscript()->Element { return p.call(g.p) }
  public subscript(n:Int)->[Element] { return gen_array(n) }
  public func gen_array(_ n:Int)->[Element] {
    return [Element].fill(self, n)
  }
  public func gen_aligned(_ n:Int)->AlignedStorage<Element> {
    return AlignedStorage<Element>.fill(self, n)
  }
  public func gen_pointer(_ n:Int)->UnsafeMutableBufferPointer<Element> {
    return UnsafeMutableBufferPointer<Element>.fill(self, n)
  }
}

% for o in dist_types:
  % for gs,gc in o.generics:
%{
n = o.typ
p1 = o.pswift.replace('#',gs)
p2 = o.p2
sep = "," if p1 else ""
}%

public final class ${n}_${gs}:Distribution<${n}${gc}C> {
  public init(_ g_:mt19937 ${sep} ${p1}) { super.init(${n}_create(${p2}, Element.init()), g_) }
  public convenience init(${p1}) { self.init(mt19937.stored, ${p2}) }
}
% if not gs:
/*
% end
extension ${gs} {
  public static func ${n}(_ g_:mt19937 ${sep} ${p1})->${n}_${gs} {return ${n}_${gs}(g_, ${p2})}
  public static func ${n}(${p1})->${n}_${gs} {return ${n}_${gs}(${p2})}
}
% if not gs:
*/
% end
  % end # g
% end # o

% for t in int_swift:
extension ${t} {
  public static func discrete_distribution(_ d_s:[Double])->discrete_distribution_${t} {
    return discrete_distribution(d_s.p, d_s.p+d_s.count)
  }
}
% end


% for t in float_swift:
extension ${t} {
  public static func piecewise_constant_distribution(_ i_s:[Double], _ w_s:[Double])->piecewise_constant_distribution_${t} {
    return piecewise_constant_distribution(i_s.p, i_s.p+i_s.count, w_s.p)
  }
  public static func piecewise_linear_distribution(_ i_s:[Double], _ w_s:[Double])->piecewise_linear_distribution_${t} {
    return piecewise_linear_distribution(i_s.p, i_s.p+i_s.count, w_s.p)
  }
}
% end

