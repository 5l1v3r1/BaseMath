import Foundation

%{ from mathfuncs import * }%

extension SupportsBasicMath {
% for f in binfs:
  @inlinable public static func ${f}(_ n:Int, _ pSrc:PtrT, _ pSrc2:PtrT,  _ pDst:MutPtrT) { for i in 0..<n { pDst[i] = pSrc[i].${f}(pSrc2[i]) } }
  @inlinable public static func ${f}(_ n:Int, _ pSrc:PtrT, _ val:Element, _ pDst:MutPtrT) { for i in 0..<n { pDst[i] = pSrc[i].${f}(val     ) } }

  @inlinable public static func sum${f}(_ n:Int, _ pSrc:PtrT, _ pSrc2: PtrT)->Element {
    var r:Element = 0.0;
    for i in 0..<n { r += pSrc[i].${f}(pSrc2[i]) }
    return r
  }
  @inlinable public static func sum${f}(_ n:Int, _ pSrc:PtrT, _ pSrc2: Element)->Element {
    var r:Element = 0.0;
    for i in 0..<n { r += pSrc[i].${f}(pSrc2) }
    return r
  }
% end
% for f in unaryfs:
  @inlinable public static func ${f}(_ n:Int, _ pSrc:PtrT, _ pDst:MutPtrT) { for i in 0..<n { pDst[i] = pSrc[i].${f}() } }

  @inlinable public static func sum${f}(_ n:Int, _ pSrc:PtrT)->Element {
    var r:Element = 0.0;
    for i in 0..<n { r += pSrc[i].${f}() }
    return r
  }
% end
}

public protocol BaseVector: RandomAccessCollection, MutableCollection, ExpressibleByArrayLiteral, Equatable
  where Index==Int, Element:SupportsBasicMath {
  typealias PtrT = UnsafePointer<Element>
  typealias MutPtrT = UnsafeMutablePointer<Element>

  init(_ data:Array<Element>)
  init(_ count:Int)

  func new(_ size:Int)->Self
  func copy()->Self
  var p:MutPtrT {get}

% for f in binfs:
  func ${f}(_ b: Self, _ dest:Self)
  func ${f}_(_ b:Self)
  func sum${f}(_ b:Self)->Element
% end # f

% for f in unaryfs:
  func ${f}(_ dest:Self)
  func ${f}_()
  func sum${f}()->Element
% end # f

  func sum() -> Element
}

extension BaseVector {
  public init(arrayLiteral data: Element...) { self.init(data) }
  public var indices: Range<Int> { return 0..<endIndex }
  public var startIndex: Int { return 0 }

  public func new(_ size:Int)->Self { return .init(size) }
  public func new()  -> Self { return new(count) }
  public var c:Int {get {return count}}

  public static func ==(lhs:Self, rhs:Self) -> Bool { return lhs.elementsEqual(rhs) }
  public static func ==(lhs:Array<Element>, rhs:Self) -> Bool { return self.init(lhs) == rhs }
  public static func ==(lhs:Self, rhs:Array<Element>) -> Bool { return lhs == self.init(rhs) }

  @inlinable public func new_call(_ f:(Self)         ->()              )->Self { let res = new(); f(      res); return res }
  @inlinable public func new_call(_ f:(Self, Self)   ->(), _ b:Self    )->Self { let res = new(); f(b,    res); return res }
  @inlinable public func new_call<T>(_ f:(T, Self)   ->(), _ b:T       )->Self { let res = new(); f(b,    res); return res }
  @inlinable public func new_call<T>(_ f:(T, T, Self)->(), _ b:T, _ c:T)->Self { let res = new(); f(b, c, res); return res }
  @inlinable public func new_call<T>(_ f:(T, Self)->(), _ b:T, n:Int   )->Self { let res = new(n); f(b, res);   return res }
  @inlinable public func new_call<T>(_ f:(T, T, Self)->(), _ b:T, _ c:T, n:Int)->Self { let res = new(n); f(b, c, res); return res }

  @inlinable public func sum() -> Element { return Element.sum(p, numericCast(c)) }

% for f in binfs:
  % for t in 'Self','Element':
  %{ c = 'b' if t=='Element' else 'b.p' }%
  @inlinable public func ${f} (_ b:${t})->Self { return new_call(${f}, b) }
  @inlinable public func ${f} (_ b:${t}, _ dest:Self) { Element.${f}(c, self.p, ${c}, dest.p) }
  @inlinable public func ${f}_(_ b:${t}) { ${f}(b, self) }
  @inlinable public func sum${f}(_ b:${t})->Element { return Element.sum${f}(c, self.p, ${c}) }
  % end
% end # f

% for f in unaryfs:
  @inlinable public func ${f} ()->Self { return new_call(${f}) }
  @inlinable public func ${f}(_ dest:Self) { Element.${f}(c, self.p, dest.p) }
  @inlinable public func ${f}_() { ${f}(self) }
  @inlinable public func sum${f}()->Element { return Element.sum${f}(c, self.p) }
% end # f

% for f,op in zip(op_fs,ops):
  % for t in 'Self','Element':
  @inlinable public static func ${op}  (lhs:Self, rhs:${t}) -> Self { return lhs.${f}( rhs) }
  @inlinable public static func ${op}= (lhs:Self, rhs:${t})         {        lhs.${f}_(rhs) }
  % end
% end # op,f

% for f,op in zip('add subRev mul divRev'.split(),ops):
  @inlinable public static func ${op}  (lhs:Element, rhs:Self) -> Self { return rhs.${f}(  lhs) }
% end # op,f
}

