#include "include/CBaseMath.h"

%{ import sys; sys.path.append('../..'); from mathfuncs import * }%

#include <cmath>

using namespace std; 

% for t,s in zip(ctypes,['f','']):

void sm_add_${t}(const ${t}* __restrict__ pSrc, const ${t} val, ${t}* __restrict__ pDst, const int len) {
  for (int i=0; i<len; ++i) { pDst[i] = pSrc[i]+val; }
}

${t} smSum_${t}(const ${t}* __restrict__ pSrc, const int len) {
  ${t} r = 0;
  #pragma clang loop interleave_count(8)
  for (int i=0; i<len; ++i) { r += pSrc[i]; }
  return r;
}

${t} smSum_sqr_${t}(const ${t}* __restrict__ pSrc, const int len) {
  ${t} r = 0;
  #pragma ivdep
  #pragma clang loop interleave_count(8)
  for (int i=0; i<len; ++i) { r += pSrc[i]*pSrc[i]; }
  return r;
}

  % for f in unaryfs:
${t} smSum_${f}_${t}(const ${t}* __restrict__ pSrc, const int len) {
  ${t} r = 0;
  #pragma ivdep
  #pragma clang loop interleave_count(8)
  for (int i=0; i<len; ++i) { r += ${f}(pSrc[i]); }
  return r;
}

void sm_${f}_${t}(const ${t}* __restrict__ pSrc, ${t}* __restrict__ pDst, const int len) {
  #pragma ivdep
  #pragma clang loop interleave_count(8)
  for (int i=0; i<len; ++i) { pDst[i] = ${f}(pSrc[i]); }
}
  % end # f

% end # t

